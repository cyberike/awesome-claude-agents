import json\nimport logging\nfrom typing import List\n\nlogger = logging.getLogger(__name__)\n\nclass OilPumpTelemetry:\n    def __init__(self, pump_id: str, pressure: float, temperature: float, flow_rate: float):\n        self.pump_id = pump_id\n        self.pressure = pressure\n        self.temperature = temperature\n        self.flow_rate = flow_rate\n\n    def to_dict(self):\n        return {\n            'pump_id': self.pump_id,\n            'pressure': self.pressure,\n            'temperature': self.temperature, \n            'flow_rate': self.flow_rate\n        }\n\nclass TelemetryOptimizer:\n    def __init__(self, telemetry_data: List[OilPumpTelemetry]):\n        self.telemetry_data = telemetry_data\n\n    def optimize(self) -> List[OilPumpTelemetry]:\n        """Optimize telemetry data by removing outliers and smoothing values"""\n        # TODO: Implement optimization logic\n        return self.telemetry_data\n\n    def generate_report(self) -> str:\n        """Generate a JSON report of the optimized telemetry data"""\n        optimized_data = [t.to_dict() for t in self.optimize()]\n        return json.dumps(optimized_data, indent=2)\n        \ndef main():\n    # Example usage\n    raw_telemetry = [\n        OilPumpTelemetry('pump1', 100.2, 40.1, 50.0),\n        OilPumpTelemetry('pump2', 97.1, 41.5, 49.2),\n        OilPumpTelemetry('pump3', 102.5, 39.8, 51.1)\n    ]\n\n    optimizer = TelemetryOptimizer(raw_telemetry)\n    report = optimizer.generate_report()\n    print(report)\n\nif __name__ == '__main__':\n    main()\n